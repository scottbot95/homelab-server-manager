{
    use yew_hooks::prelude::use_click_away;
    use popper_rs::prelude::*;

    #[derive(PartialEq, Properties)]
    struct ExampleMenuProperties {
        r#ref: NodeRef,
        style: AttrValue,
    }

    #[function_component(ExampleMenu)]
    fn example_menu(props: &ExampleMenuProperties) -> Html {
        let toaster = use_toaster().unwrap();
        let action = use_callback(toaster, |_, toaster| toaster.toast("Clicked it!"));

        html!(
            <Menu r#ref={props.r#ref.clone()} style={&props.style}>
                <MenuAction onclick={action.clone()}>{ "Action" }</MenuAction>
                <MenuLink href="/">{ "Link" }</MenuLink>
                <MenuAction disabled=true>{ "Action (disabled)" }</MenuAction>
                <MenuLink disabled=true href="/">{ "Link (disabled)" }</MenuLink>
                <ListDivider />
                <MenuAction onclick={action.clone()} danger=true>{ "Action" }</MenuAction>
            </Menu>
        )
    }

    #[function_component(Example)]
    fn example() -> Html {
        let expanded = use_state_eq(||false);

        let away_ref = use_node_ref();
        let toggle_ref = use_node_ref();
        let menu_ref = use_node_ref();
        {
            let expanded = expanded.clone();
            use_click_away(away_ref.clone(), move |_: Event| expanded.set(false));
        }

        let ontoggle = use_callback(expanded.clone(), |_, expanded| expanded.set(!**expanded));

        let state = use_state_eq(State::default);
        let onstatechange = use_callback(state.clone(), |new_state, state| state.set(new_state));

        html!(
            <>
                <div ref={away_ref} style="display: inline;">
                    <MenuToggle
                        r#ref={toggle_ref.clone()}
                        text="Example Menu"
                        expanded={*expanded}
                        {ontoggle}
                    />

                    <InlinePopper
                        target={toggle_ref}
                        content={menu_ref.clone()}
                        placement={Placement::Bottom}
                        visible={*expanded}
                        {onstatechange}
                    >
                        <ExampleMenu
                            r#ref={menu_ref}
                            style={&state
                                .styles.popper
                                .extend_with("z-index", "1000")
                            }
                        />
                    </InlinePopper>

                </div>
            </>
        )
    }

    html!(<Example/>)
}
